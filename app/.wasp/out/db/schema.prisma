
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output = env("PRISMA_CLIENT_OUTPUT_DIR")
}

model User {
  id Int @id @default(autoincrement())
  email String? @unique
  username String @unique
  password String
  createdAt DateTime @default(now())
  lastActiveTimestamp DateTime @default(now())
  isAdmin Boolean @default(false)
  isEmailVerified Boolean @default(false)
  emailVerificationSentAt DateTime?
  passwordResetSentAt DateTime?
  stripeId String?
  checkoutSessionId String?
  hasPaid Boolean @default(false)
  subscriptionTier String?
  subscriptionStatus String?
  sendEmail Boolean @default(false)
  datePaid DateTime?
  credits Int @default(3)
  gptResponses GptResponse[]
  externalAuthAssociations SocialLogin[]
  contactFormMessages ContactFormMessage[]
  tasks Task[]

}
model SocialLogin {
  id String @id @default(uuid())
  provider String
  providerId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  createdAt DateTime @default(now())
  @@unique([provider, providerId, userId])

}
model GptResponse {
  id String @id @default(uuid())
  content String
  user User @relation(fields: [userId], references: [id])
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}
model Task {
  id String @id @default(uuid())
  description String
  time String @default("1")
  isDone Boolean @default(false)
  user User @relation(fields: [userId], references: [id])
  userId Int
  createdAt DateTime @default(now())

}
model ContactFormMessage {
  id String @id @default(uuid())
  content String
  user User @relation(fields: [userId], references: [id])
  userId Int
  createdAt DateTime @default(now())
  isRead Boolean @default(false)
  repliedAt DateTime?

}
model DailyStats {
  id Int @id @default(autoincrement())
  date DateTime @default(now()) @unique
  totalViews Int @default(0)
  prevDayViewsChangePercent String @default("0")
  userCount Int @default(0)
  paidUserCount Int @default(0)
  userDelta Int @default(0)
  paidUserDelta Int @default(0)
  totalRevenue Float @default(0)
  totalProfit Float @default(0)
  sources PageViewSource[]

}
model PageViewSource {
  date DateTime @default(now())
  name String
  visitors Int
  dailyStats DailyStats? @relation(fields: [dailyStatsId], references: [id])
  dailyStatsId Int?
  @@id([date, name])

}
model Logs {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  message String
  level String

}
